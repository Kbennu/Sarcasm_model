import streamlit as st
import torch
from transformers import DistilBertTokenizer, DistilBertForSequenceClassification

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
model = torch.load("sarcasm_model.pkl")
tokenizer = torch.load("vectorizer.pkl")

def predict_sarcasm(text):
    # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    inputs = tokenizer(text, truncation=True, padding=True, max_length=128, return_tensors="pt")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        predicted_class = torch.argmax(logits, dim=1).item()
        prob = torch.softmax(logits, dim=1)[0, 1].item()  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∞—Ä–∫–∞–∑–º–∞

    return "Sarcasm" if predicted_class == 1 else "Not sarcasm", prob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Sarcasm Detection", page_icon="ü§ñ", layout="centered")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("Sarcasm Detection App")
st.markdown("Enter a headline to check if it's sarcasm or not!")

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
user_input = st.text_area("Enter text here:")

if user_input:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    classification, prob = predict_sarcasm(user_input)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    st.subheader(f"Prediction: {classification}")
    st.write(f"Probability: {prob * 100:.2f}%")

    # –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    if classification == "Sarcasm":
        st.markdown('<p style="color:red; font-size: 24px;">Warning: Sarcasm detected!</p>', unsafe_allow_html=True)
    else:
        st.markdown('<p style="color:green; font-size: 24px;">No sarcasm detected.</p>', unsafe_allow_html=True)